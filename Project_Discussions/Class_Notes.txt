#################
9th Oct. 2023
#################

		Project Discussion :::
		
		Pre-requisites :::
		
		Process of Project / Software - Development LifeCycle :::
		
		End Goal ::::
		
			Profile ::
			
				DevOps Skill :::
				
						Tool 				: 	GIT,Jenkins,Docker,Kubernetes,Ansible,Terraform,/Prometheus/Grafana.
						
						Scripting Languages : 	Shell,Groovy Script for CI/CD Pipeline, Yaml Scripts for Ansible & Kubernetes
												Python Scripting(Added advantage)
												
						Development Process	:	How the Applications are developed, build, tested and deployed.
						
				Projects :::
				
						About the Project 
						Problem Statements 
						Tools used 
						
						Solutions given 
						Your Key roles and responsibilities
			
		Best Practises for this project:::
		
			- Keep a log of all that you do and you get!
			
			- Create a log file :
			
				Challenges you have faced.
				How you get it fixed?
				
			- Group Discussion weekly twice.
			
			- Tools --> Keep a note of alternative tools at every level.
			
			- Do NOT focus only on the task.
			
			- Do Focus on the process based task.
			
		

		Projects :::
		
			Developers should Have Domain Knowledge.
			
				Insurance 
				Health 
				Retail 
				Banking 
				Financial 
		
			DevOps ::::
			
			
			Project :::
			
			
			www.gmail.com				DNS  	x.x.x.x					==> endpoint 
			www.gmail.com/inbox 				x.x.x.x/inbox			==> endpoint
			www.gmail.com/sent
			www.gmail.com/spam
			
		
			www.google.com

			www.maps.google.com
			www.drive.google.com
			www.translate.google.com
			www.gmail.com
			
			
			How you are going to come-up with the Solutions?
			
			Your roles and responsibilities - List of Tasks you are gng to do.
			
				
				
			<public_ip_Address>:8080/contact.html
			
			https://www.amazon.in/mobile-phones/
			
			
#################
10th Oct. 2023
#################			
			
		Banking Project ::::
		
		HealthCare ::::
		
		Solution :::
		
		Ansible for deployment :::
		
		
		
		Developers Perspective:
			Continuous Development : 
				
				- Fork the given src_code Repository.
				- Open Eclipse IDE 
						- Import a Maven project from github. 
				- Make Necessary Changes if need / Without making changes try to validate the result using tomcat server intergration in eclipse.
				
				- Commit the changes in remote src_code Repository.

		DevOps Perspective:
			Continuous Integration/Testing/Delivery/Deployment 
			
			- Create github webhook - first.
			- Create Jenkins_pipeline.
				Stages :::
				
					1. SCM_Checkout
							--> clone the src_code repo in jenkins slave node.
							git '<repo_url>'
								Send the Email Notifications to the stake holder - during failure.						
					2. Build_Application using Maven ==> *.war 
					3. Build_Docker Image 
					4. Publish Image to Docker_Hub
					5. Deploy the image in target environment QA/UAT/PROD ???
							If kubernetes is used, deploy the appln in kubernetes_Cluster
							If Not, deploy the appln in target servers.
			
				*** Setup email_Notifications where_ever possible.
		
		Production Support/Monitoring :		
			Monitoring :
		
		Infra-Structure Requirement ::::
		
				How many VMs we need?  Tag : SA_Project_***
					Jenkins_master
					Build_Server 
					QA_Server
					Prod_Server
					Monitoring_Server
					Kubernetes_Master 
					Kubernetes_Worknode1,2,3
					Ansible_Controller
					Terraform_Server
					
				What is the purpose of each VM?
					Jenkins_master	==> To create & Schedule the jobs
					Jenkins_Slave	==> To Build Application & Create Artifacts & Build Application Images
					QA_Server		==> To test the appications
					Prod_Server		==> Deploymements
					Monitoring_Server ==> Set Up Monitoring tools to monitor the Prod_Server
					Kubernetes_Master ==> Create Pods & Deployments
					Kubernetes_Worknode1,2,3 ==> To ensure high availability of applications/pods
					Ansible_Controller ==> To configure the tools in build server & Perform Appln. deployment to QA & Prod severs--> 
					Terraform_Server   ==> Provision the VMs - 			
				
				
				What are the tools to be installed in each VM?
				
					Jenkins_master				==> git, jdk, Jenkins
					Jenkins-Build_Server 		==> git, jdk, maven, docker
					QA_Server					==> jdk,tomcat, / docker
					Prod_Server 				==> jdk,tomcat, / docker
					Monitoring_Server			==> prometheus & Grafana
					Kubernetes_Master 			==> Kubernetes Components 
					Kubernetes_Worknode1,2,3	==> Kubernetes Components 
					Ansible_Controller			==> python & ansible									
					Terraform_Server			==> Terraform	
					
				
				Action Items ::: @ Infra-Structure Perspective :::
				
					Launch all the required VMs 
					Install the tools in each VMs 
					Create Users in all the required servers 
					Create the SSH-Keys in all the required servers
					Integrate the Servers 
					Ensure that the servers can interact without any access/network issues.
					
				Action Items ::: @ DevOps CICD Perspective :::	
				
					Create CI/CD Pipeline
					
			- Create github webhook - first.
			- Create Jenkins_pipeline.
				Stages :::
				
					1. SCM_Checkout
							--> clone the src_code repo in jenkins slave node.
							git '<repo_url>'
								Send the Email Notifications to the stake holder - during failure.						
					2. Build_Application using Maven ==> *.war 
					3. Build_Docker Image 
					4. Publish Image to Docker_Hub
					5. Deploy the image in target environment QA/UAT/PROD ???
							If kubernetes is used, deploy the appln in kubernetes_Cluster
							If Not, deploy the appln in target servers.


									
#################
12th Oct. 2023
#################

			DevOps Perspective :::::
			
			
			
			Development Perspective :::::
			
			
			FROM tomcat:8.5 
			
			FROM Centos:latest 
			RUN jdk
			RUN Tomcat 
			EXPOSE 8089
			
			
			tomcat:latest --> hub 
			
			docker run -it tomcat:latest  			backend
			
			docker run -it -p <host_port>:<container_port> tomcat:latest   front_end
			
			replication of Pods --> 
			
			DevOps Perspective :::::
			
				- Create all the required VMS & Install the tools.
				- Create the Users, Access keys / credentials 
				- Integrate the servers.
				- Create CI/CD Pipeline.
				- Test Repositories 
			
			
				What are the tools to be installed in each VM?
				
					Jenkins_master				==> git, jdk, Jenkins
					Jenkins-Build_Server 		==> git, jdk, maven, docker
					Kubernetes_Master 			==> Kubernetes Components 
					Kubernetes_Worknode1,2,3	==> Kubernetes Components
					
					Monitoring_Server			==> prometheus & Grafana				
			
				Action Items ::: @ Infra-Structure Perspective :::
				
					Launch all the required VMs 
					Install the tools in each VMs 
					Create Users in all the required servers 
					Create the SSH-Keys in all the required servers
					Integrate the Servers 
					Ensure that the servers can interact without any access/network issues.
					
				Action Items ::: @ DevOps CICD Perspective :::	
				
					Create CI/CD Pipeline			

Email Notification Plugins :::

SMTP Server :
smtp.gmail.com

SMTP Authentication

SMTP Port :: 465

Login to Gmail :::

Click Account Settings

select Security 

MFA --> mobile#
App Password = 16
What ? window
Which Appln - email	

		

Use Publish Over SSH Plugins to connect jenkins master with Kubernetes and copy the *.yaml to Kubernetes Master.

	Create UserID-devopsadmin in Kubernetes Master Node 
	Craete SSH_Key to the userID-devopsadmin 
	devopsadmin should have access to Kubernetes to execute kubectl commands and Docker.
	Use Publish Over SSH Plugins and Add Server - Kubernetes_Master

###########################################
In Kubernetes Master :::
#Add User : 

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen
#for Ubuntu ::
ssh-keygen -t rsa -b 2048 -m PEM
ls ~/.ssh 

#You should see following two files:
#id_rsa - private key
#id_rsa.pub - public

cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
###Add user to User to docker group ::

###As a root user exec this command :
usermod -aG docker devopsadmin

visudo 

devopsadmin ALL=(ALL) NOPASSWD: ALL

#add Admin access to devopsadmin user with NOPASSWD

####Give kubectl access to devopsadmin :::::

su - devopsadmin

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
#################
13th Oct. 2023
#################			
			kubectl create -f <file1.yaml>
			kubectl apply -f <file1.yaml>

https://github.com/LoksaiETA/SA11-BankingApp.git
			

pipeline {

    agent { label 'slave1' }
	
    tools {
        maven "maven-3.6.3"
    }

	environment {	
		DOCKERHUB_CREDENTIALS=credentials('dockerloginid')
	}
	
    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/LoksaiETA/devops-java-webapp.git'
            }
        }
        stage('Application_Build') {
            steps {
                echo 'Perform Maven Build'
				sh 'mvn -Dmaven.test.failure.ignore=true clean package'
            }
			  post {
				failure {
				  sh "echo 'Send mail on failure'"
				  mail to:"lemail3@gmail.com", from: 'lemail3@gmail.com', subject:"FAILURE: ${currentBuild.fullDisplayName}", body: "Build failed."
				}
			  }
        }
        stage('Build Docker Image') {
            steps {
				sh 'docker version'
				sh "docker build -t loksaieta/loksai-eta-app1:${BUILD_NUMBER} ."
				sh 'docker image list'
				sh "docker tag loksaieta/loksai-eta-app1:${BUILD_NUMBER} loksaieta/loksai-eta-app1:latest"
            }
              post {
                success {
                  sh "echo 'Send mail docker Build Success'"
                  mail to:"lemail3@gmail.com", from: 'lemail3@gmail.com', subject:"App Image Created Please validate", body: "App Image Created Please validate - loksaieta/loksai-eta-app1:latest"
                }
                failure {
                  sh "echo 'Send mail docker Build failure'"
                  mail to:"lemail3@gmail.com", from: 'lemail3@gmail.com', subject:"FAILURE: ${currentBuild.fullDisplayName}", body: "Image Build failed."
                }
              }	
        }
        stage('Approve - push Image to dockerhub'){
            steps{
                
                //----------------send an approval prompt-------------
                script {
                   env.APPROVED_DEPLOY = input message: 'User input required Choose "Yes" | "Abort"'
                       }
                //-----------------end approval prompt------------
            }
        }
		stage('Login2DockerHub') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}
		stage('Publish_to_Docker_Registry') {
			steps {
				sh "docker push loksaieta/loksai-eta-app1:latest"
			}
		}
		stage('Deploy to Kubernetes_Cluster') {
			steps {
				script {
					sshPublisher(publishers: [sshPublisherDesc(configName: 'Kubernetes', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'kubectl apply -f k8smvndeployment.yaml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*.yaml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])	
				}
			}
		}
    }
}									
	

https://github.com/LoksaiETA/SA11-BankingApp.git
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bankapp-eta-deploy
  labels:
    app: bankapp-eta-app1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: bankapp-eta-app
  template:
    metadata:
      labels:
        app: bankapp-eta-app
    spec:
      containers:
      - name: bankapp-eta-container
        image: loksaieta/bankapp-eta-app
        ports:
        - containerPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: bankapp-eta-np-service1
  labels:
    app: bankapp-eta-app1
spec:
  selector:
    app: bankapp-eta-app

  type: NodePort
  ports:
  - nodePort: 31111    
    port: 8081
    targetPort: 8081

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~````	

			
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loksai-eta-deploy1
  labels:
    app: loksai-eta-app1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: loksai-eta-app1
  template:
    metadata:
      labels:
        app: loksai-eta-app1
    spec:
      containers:
      - name: loksai-eta-container1
        image: loksaieta/loksai-eta-app1
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: loksai-eta-np-service1
  labels:
    app: loksai-eta-app1
spec:
  selector:
    app: loksai-eta-app1

  type: NodePort
  ports:
  - nodePort: 31002
    port: 8080
    targetPort: 8080




################
16th Oct. 2023
################
		
		Developers Perspective:
			Continuous Development : 
				
				- Fork the given src_code Repository.
				- Open Eclipse IDE / Visual Studio Code 
						- Import a Maven project from github. 
				- Make Necessary Changes if need / Without making changes try to validate the result using tomcat server intergration in eclipse.
				
				- Commit the changes in remote src_code Repository.
				- Using GIThub Webhook jenkins CICD pipelines gets triggered.
				
		
		selenium : 
				

		DevOps Perspective:
			Continuous Integration/Testing/Delivery/Deployment 
			
			- Create github webhook - first.
			- Create Jenkins_pipeline.
				Stages :::
				
					1. SCM_Checkout
							--> clone the src_code repo in jenkins slave node.
							git '<repo_url>'
								Send the Email Notifications to the stake holder - during failure.						
					2. Build_Application using Maven ==> *.war 
					3. Build_Docker Image 
					4. Publish Image to Docker_Hub
					5. Deploy the image in target environment QA/UAT/PROD ???
							If kubernetes is used, deploy the appln in kubernetes_Cluster
							If Not, deploy the appln in target servers.
			
				*** Setup email_Notifications where_ever possible.
		


			1st run ==> 8080
			
			2nd run ==> 8081
			
			

################
17th Oct. 2023
################

DevOps	

git,jenkins,docker,kubernetes,ansible,terraform	

Linux ::

	root user == >
		while working with any pkgs.
		sytem config 
		/etc/*
		create any new users...
		
	Jenkins_Slave_Machine :::
		installed the build tools, created devopsadmin user				root user
		Performed Application Build created artifacts					devopsadmin user 
		docker build 													devopsadmin user

	
	git,jenkins,docker,kubernetes,ansible,terraform	::::
	
		On Interview Perspective ::::
		
			Every topic is important.
			
			
################
19th Oct. 2023
################


		Deployment Controller Objects ???
		
		kubectl get pods -n dev
		
				Error: Msgs !!!
				
				
		kubectl get pods --all-namespaces
		
		kubectl delete ns dev


		Ansible is used for Configuration management!


		Projects ::::
		
			Kubernetes ==> 
			
			docker run 
			
			
			Create Playbook : ==> Successful/Failure
			
			ansible-playbook xyz.yaml ==> 
			
			
			Profile ::::
			
			
			github!!!! 
			
			GitHub 
			
			
			gitlab ==> Src_Code 
			gitlab-ci ==> Create ci/cd pipeline 
			
			jenkins ==> groovy 
			
			*.yaml ==> Scripts 
			
			
		Jenkins_pipeline --> Infra Provisioning & Configuration!		==> GitOps!!!!
		
			-> SCM_Checkout 						checkout - terraform/playbook(roles)
			-> Create Resources using Terraform 
			-> Ansible Config
		
		Jenkins_Pipeline -- CI/CD :::
		
		SCM_Checkout 
		Application_Build
		Deploy to Test_Server
		
		DevOps - DevSecops - SRE - GitOps - MLOps - AIOps .....
		
		NodePort Service ::::
		
			31000 -- <external_IP_Addr>:31000 ==> 
			
		Ingress Controller Objects :::
		
			www.gmail.com					#LoadBalancer -- IP_Address
			www.gmail.com/inbox		url 	#Ingress Controller -- IP_Adress 	
			www.gmail.com/sent		url 	#Ingress Controller -- IP_Adress 
			
			
			
			
			

				
